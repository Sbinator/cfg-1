;; -*- lisp -*-

(in-package :stumpwm)

;; (require :swank)
;; (swank-loader:init)
;; (swank:create-server :port 4004
;;                      :style swank:*communication-style*
;;                      :dont-close t)

(set-prefix-key (kbd "C-e"))
(setf *startup-message* NIL)
(setf *suppress-abort-messages* t)
(setf *shell-program* (getenv "SHELL"))

(defvar *message-filters* '("Group Dumped")
  "Don't show these messages.")

(defun message (fmt &rest args)
  "run FMT and ARGS through `format' and echo the result to the current screen."
  (let ((msg-string (apply 'format nil fmt args)))
    (unless (member msg-string *message-filters* :test #'string=)
      (echo-string (current-screen) msg-string))))

(set-module-dir
 (pathname-as-directory (concat (getenv "HOME") "/stumpwm/contrib")))

(defun add-locals (names)
  (map nil (lambda (n) (add-to-load-path (pathname-as-directory (concat (getenv "HOME") "/stumpwm/local/" n)))) names))

(add-locals '("swm-calibre"))

(load-module "ttf-fonts")
(load-module "winner-mode")
(load-module "swm-calibre")
(setf swm-calibre:*calibre-root* #p"~/.tofish/d/Cloud/Calibre Shared/")

(defvar *open-stuff-map* (make-sparse-keymap))
(define-key *root-map* (kbd ".") '*open-stuff-map*)
(define-key *open-stuff-map* (kbd "b") "open-book")

(defvar *winner-map* (make-sparse-keymap))
(define-key *root-map* (kbd "c") '*winner-map*)
(define-key *winner-map* (kbd "Left") "winner-undo")
(define-key *winner-map* (kbd "Right") "winner-redo")

(add-hook *post-command-hook* (lambda (command)
                                (when (member command winner-mode:*default-commands*)
                                  (winner-mode:dump-group-to-file))))

(set-font (make-instance 'xft:font
                         :family "Source Code Pro"
                         :subfamily "Regular"
                         :size 9))
(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
(setf *message-window-padding* 5)
(set-normal-gravity :top)
(set-maxsize-gravity :center)
(set-transient-gravity :top)

(setf *maxsize-border-width* 2
      *transient-border-width* 0
      *float-window-border* 2
      *normal-border-width* 2)

(setf *window-border-style* :thin)

(set-fg-color "#d7d0c7")
(set-bg-color "#303d43")
(set-border-color "#425e5a")
(set-focus-color "#6c7b8b")
(set-unfocus-color "#303d43")
(set-win-bg-color "#1d1f20")
(set-float-focus-color "#a9a9a9")
(set-float-unfocus-color "#303d43")

(setf *colors* (list "#171717"      ; 0 black
                     "#ff6a6a"      ; 1 red
                     "#66cd00"      ; 2 green
                     "#ffd700"      ; 3 yellow
                     "#4f94cd"      ; 4 blue
                     "#c6e2ff"      ; 5 magenta
                     "#00cdcd"      ; 6 cyan
                     "#ffffff"))    ; 7 white

(update-color-map (current-screen))

(setf *mouse-focus-policy* :click)

(defvar *useless-gaps-size* 7)
(defvar *useless-gaps-on* nil)

;; Redefined - with `if`s for *useless-gaps-on*
(defun maximize-window (win)
  "Maximize the window."
  (multiple-value-bind (x y wx wy width height border stick)
      (geometry-hints win)

    (if *useless-gaps-on*
        (setf width (- width (* 2 *useless-gaps-size*))
              height (- height (* 2 *useless-gaps-size*))
              x (+ x *useless-gaps-size*)
              y (+ y *useless-gaps-size*)))

    (dformat 4 "maximize window ~a x: ~d y: ~d width: ~d height: ~d border: ~d stick: ~s~%" win x y width height border stick)
    ;; This is the only place a window's geometry should change
    (set-window-geometry win :x wx :y wy :width width :height height :border-width 0)
    (xlib:with-state ((window-parent win))
      ;; FIXME: updating the border doesn't need to be run everytime
      ;; the window is maximized, but only when the border style or
      ;; window type changes. The overhead is probably minimal,
      ;; though.
      (setf (xlib:drawable-x (window-parent win)) x
            (xlib:drawable-y (window-parent win)) y
            (xlib:drawable-border-width (window-parent win)) border)
      ;; the parent window should stick to the size of the window
      ;; unless it isn't being maximized to fill the frame.
      (if (or stick
              (find *window-border-style* '(:tight :none)))
          (setf (xlib:drawable-width (window-parent win)) (window-width win)
                (xlib:drawable-height (window-parent win)) (window-height win))
          (let ((frame (window-frame win)))
            (setf (xlib:drawable-width (window-parent win)) (- (frame-width frame)
                                                               (* 2 (xlib:drawable-border-width (window-parent win)))
                                                               (if *useless-gaps-on* (* 2 *useless-gaps-size*) 0))
                  (xlib:drawable-height (window-parent win)) (- (frame-display-height (window-group win) frame)
                                                                (* 2 (xlib:drawable-border-width (window-parent win)))
                                                                (if *useless-gaps-on* (* 2 *useless-gaps-size*) 0)))))
      ;; update the "extents"
      (xlib:change-property (window-xwin win) :_NET_FRAME_EXTENTS
                            (list wx wy
                                  (- (xlib:drawable-width (window-parent win)) width wx)
                                  (- (xlib:drawable-height (window-parent win)) height wy))
                            :cardinal 32))))

(defun reset-all-windows ()
  "Reset the size for all tiled windows"
  (let ((windows (mapcan (lambda (g)
                           (mapcar (lambda (w) w) (sort-windows g)))
                         (sort-groups (current-screen)))))
    (mapcar (lambda (w)
              (if (string= (class-name (class-of w)) "TILE-WINDOW")
                  (maximize-window w))) windows)))

(defcommand toggle-gaps () ()
  "Toggle the padding of tiled windows"
  (setf *useless-gaps-on* (null *useless-gaps-on*))

  ;; Following is pseudo code to use hooks
  ;; to do something like change border colors or size
  ;; (if *useless-gaps-on*
  ;;     (run-hook 'frame-gap-on)
  ;;     (run-hook 'frame-gap-off))
  (reset-all-windows))

(defcommand run-konsole () ()
  "Run konsole"
  (run-shell-command "konsole"))

(defcommand run-or-raise-firefox () ()
  "Firefox"
  (run-or-raise "firefox" '(:class "Firefox") T T))

(defcommand run-chromium () ()
  (run-shell-command "chromium-browser"))

(defcommand player-next () ()
  (run-shell-command "player-next"))

(defcommand player-prev () ()
  (run-shell-command "player-prev"))

(defcommand player-toggle () ()
  (run-shell-command "player-toggle"))

(defcommand run-xkill () ()
  (run-shell-command "xkill"))

(defcommand run-htop () ()
  (run-shell-command "konsole -e htop"))

(defcommand refresh-desktop () ()
  (run-shell-command "sh ~/.fehbg")
  (gnew "*refresh-group*")
  (gkill)
  (message "desktop refreshed"))

(define-key *top-map* (kbd "C-M-t") "run-konsole")
(define-key *top-map* (kbd "C-M-Left") "player-prev")
(define-key *top-map* (kbd "C-M-Right") "player-next")
(define-key *top-map* (kbd "C-M-SPC") "player-toggle")
(define-key *top-map* (kbd "C-M-g") "toggle-gaps")
(define-key *top-map* (kbd "s-x") "run-xkill")
(define-key *top-map* (kbd "s-w") "run-htop")

(define-key *root-map* (kbd "C-f") "run-or-raise-firefox")
(define-key *root-map* (kbd "C-c") "run-chromium")
(define-key *root-map* (kbd "b") "windowlist")
(define-key *root-map* (kbd "q") "refresh-desktop")

(define-key *groups-map* (kbd "Right") "gnext")
(define-key *groups-map* (kbd "Left") "gprev")
(define-key *groups-map* (kbd "M-Right") "gnext-with-window")
(define-key *groups-map* (kbd "M-Left") "gprev-with-window")
(define-key *groups-map* (kbd "b") "grouplist")

(run-shell-command "sh ~/.fehbg")
(run-shell-command "compton")
(run-shell-command "dunst")
(run-shell-command "mpdas")

(toggle-gaps)
