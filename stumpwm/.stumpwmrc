;; -*- lisp -*-

(in-package :stumpwm)

;; Basics
(set-prefix-key (kbd "C-e"))
(setf *startup-message* NIL
      *suppress-abort-messages* t
      *shell-program* (getenv "SHELL"))

(defvar *message-filters* '("Group Dumped")
  "Don't show these messages.")

(defun message (fmt &rest args)
  "run FMT and ARGS through `format' and echo the result to the current screen."
  (let ((msg-string (apply 'format nil fmt args)))
    (unless (member msg-string *message-filters* :test #'string=)
      (echo-string (current-screen) msg-string))))

(set-module-dir
 (pathname-as-directory (concat (getenv "HOME") "/stumpwm/contrib")))

(defun add-locals (names)
  (map nil (lambda (n) (add-to-load-path
                   (pathname-as-directory (concat (getenv "HOME") "/stumpwm/local/" n))))
       names))

(add-locals '("swm-calibre" "swm-gaps"))

;; Modules
(load-module "ttf-fonts")
(load-module "winner-mode")
(load-module "swm-calibre")
(load-module "swm-gaps")

(setf swm-calibre:*calibre-root* #p"~/.tofish/d/Cloud/Calibre Shared/")
(setf swm-gaps:*inner-gaps-size* 7
      swm-gaps:*outer-gaps-size* 15)

(add-hook *post-command-hook* (lambda (command)
                                (when (member command winner-mode:*default-commands*)
                                  (winner-mode:dump-group-to-file))))

;; Looks
(set-font (make-instance 'xft:font
                         :family "Source Code Pro"
                         :subfamily "Regular"
                         :size 9))

(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *message-window-padding* 5
      *window-border-style* :thin
      *maxsize-border-width* 2
      *transient-border-width* 0
      *float-window-border* 2
      *normal-border-width* 2
      *mouse-focus-policy* :click)

(set-normal-gravity :top)
(set-maxsize-gravity :center)
(set-transient-gravity :top)

(set-fg-color "#d7d0c7")
(set-bg-color "#303d43")
(set-border-color "#425e5a")
(set-focus-color "#6c7b8b")
(set-unfocus-color "#303d43")
(set-win-bg-color "#1d1f20")
(set-float-focus-color "#a9a9a9")
(set-float-unfocus-color "#303d43")

(setf *colors* (list "#171717"      ; 0 black
                     "#ff6a6a"      ; 1 red
                     "#66cd00"      ; 2 green
                     "#ffd700"      ; 3 yellow
                     "#4f94cd"      ; 4 blue
                     "#c6e2ff"      ; 5 magenta
                     "#00cdcd"      ; 6 cyan
                     "#ffffff"))    ; 7 white

;; Commands
(defcommand run-or-raise-firefox () ()
  (run-or-raise "firefox" '(:class "Firefox") T T))

(defcommand run-or-raise-chromium () ()
  (run-or-raise "chromium-browser" '(:class "Chromium") T T))

(defcommand run-or-raise-konsole () ()
  (run-or-raise "konsole" '(:class "konsole") T T))

(defcommand refresh-desktop () ()
  (run-shell-command "sh ~/.fehbg")
  (gnew "*refresh-group*")
  (gkill)
  (message "desktop refreshed"))

;; All the keys
(define-key *top-map* (kbd "C-M-t") "exec konsole")
(define-key *top-map* (kbd "C-M-Left") "exec player-prev")
(define-key *top-map* (kbd "C-M-Right") "exec player-next")
(define-key *top-map* (kbd "C-M-SPC") "exec player-toggle")
(define-key *top-map* (kbd "C-M-g") "toggle-gaps")
(define-key *top-map* (kbd "s-x") "exec xkill")
(define-key *top-map* (kbd "s-w") "exec konsole -e htop")

(define-key *root-map* (kbd "C-f") "run-or-raise-firefox")
(define-key *root-map* (kbd "C-c") "run-or-raise-chromium")
(define-key *root-map* (kbd "C-k") "run-or-raise-konsole")
(define-key *root-map* (kbd "b") "windowlist")
(define-key *root-map* (kbd "q") "refresh-desktop")
(define-key *root-map* (kbd "TAB") "pull-hidden-other")

(define-key *groups-map* (kbd "Right") "gnext")
(define-key *groups-map* (kbd "Left") "gprev")
(define-key *groups-map* (kbd "M-Right") "gnext-with-window")
(define-key *groups-map* (kbd "M-Left") "gprev-with-window")
(define-key *groups-map* (kbd "b") "grouplist")

(defvar *open-stuff-map* (make-sparse-keymap))
(define-key *root-map* (kbd ".") '*open-stuff-map*)
(define-key *open-stuff-map* (kbd "b") "open-book")

(defvar *winner-map* (make-sparse-keymap))
(define-key *root-map* (kbd "c") '*winner-map*)
(define-key *winner-map* (kbd "Left") "winner-undo")
(define-key *winner-map* (kbd "Right") "winner-redo")

;; Init
(update-color-map (current-screen))
(run-shell-command "sh ~/.fehbg")
(run-shell-command "compton")
;; (run-shell-command "dunst")
(run-shell-command "mpdas")
(run-commands "toggle-gaps")
